%Sampling time
T = 0.5;

%Transition matrix
F = [1 0 T 0;
     0 1 0 T;
     0 0 1 0;
     0 0 0 1];

%Process noise covariance
Qx = 6*[0.5*T*T (2/3)*T*T*T;
      T 0.5*T*T];
Q = [Qx zeros(2,2);
     zeros(2,2) Qx];

%Measurement matrix
H = [1 0 0 0;
     0 1 0 0];

%Measurement noise covariance R
sigma2_r = 100;
sigma2_theta = 1e-3;

R = [sigma2_r 0;
     0 sigma2_theta];

%Bias
beta = [100 7e-4 1e-3 2e-3]';

%Initial state
X = [];
for i=1:32
    if(i<=8)
        X = [X [-20e4 10e4*i 20 20]'];
    elseif(i<=16)
        X = [X [-10e4 (i-8)*10e4 20 20]'];
    elseif(i<=24)
        X = [X [10e4 (i-16)*10e4 20 20]'];
    else
        X = [X [20e4 (i-24)*10e4 20 20]'];
    end
end
state = [];
radar_unbiased = [];
radar_biased = [];
gps = [];
Rad = [];
Theta = [];
H_stack = [];
Z_diff = [];
R_diag = [];

%Number of points
M = 50;

for i = 1:M
    for j=1:32
    end
    v = Q * normrnd(0,1,[4,1]);
    X = F*X + v;
    state = [state X];  
    gps = [gps [H*X; 0; i]];
    Z = H*X;
    radar_unbiased = [radar_unbiased [Z;1 ;i]];
    
    r = sqrt(Z(1,1)^2 + Z(2,1)^2);
    theta = atan2(Z(2,1),Z(1,1));
    
    Rad = [Rad r];
    Theta = [Theta theta];
    B = [cos(theta) -r*sin(theta);
        sin(theta) r*cos(theta)];
    C = [1 0 r 0;
         0 1 0 theta];
     
    r_biased = r + C(1,:)*beta + sigma2_r*normrnd(0,1);
    theta_biased = theta + C(2,:)*beta + sigma2_theta*normrnd(0,1);
    
    Z_biased = [r_biased*cos(theta_biased) ; r_biased*sin(theta_biased)];
    
    %Z_biased = [r;theta] + C*beta + [sigma2_r*normrnd(0,1);sigma2_theta*normrnd(0,1)]
    %H_stack = [H_stack ; B*C];
    %Z_biased = Z + (B*C)*beta + normrnd(0,1,[2,1]);
    radar_biased = [radar_biased [Z_biased;1 ; i]];
end


%{
for i = 1:100
    ri2 = Rad(1,i)^2;
    sin2 = sin(Theta(1,i))^2;
    cos2 = cos(Theta(1,i))^2;
    sine = sin(Theta(1,i));
    cosine = cos(Theta(1,i));
    R_i=[ri2*sigma2_theta*sin2+sigma2_r*cos2   (sigma2_r-ri2*sigma2_theta)*sine*cosine; 
        (sigma2_r-ri2*sigma2_theta)*sine*cosine  ri2*sigma2_theta*cos2+sigma2_r*sin2];
    R_diag(2*i-1:2*i,2*i-1:2*i) = R_i;
end
%}





%state covariance 
P = 40*eye(4);
%measurmement covariance 
R = [10 0;0 0.1];
x = [10e4 10e4 25 25]';
track = [];
for z=radar_biased(1:2,:)
    %one step estimate 
    x_hat = F*x;
    P_hat = F*P*F';
    
    %meaurement estimate 
    z_hat = H*x;
    
    %innovation and its covariance 
    v = z - z_hat;
    S = H*P*H'+ R;
    
    %filter gain 
    W = P*H'*pinv(S);
    
    %updated estimates 
    x = x_hat + W*v;
    P = P - W*S*W';
    
    track = [track x];
end

for i=1:100
    x = track(1,i);
    y = track(2,i);
    r = sqrt(x^2 + y^2);
    theta = atan2(y,x);
    B = [cos(theta) -r*sin(theta);
        sin(theta) r*cos(theta)];
    C = [1 0 r 0;
         0 1 0 theta];
     
    H_stack = [H_stack ; B*C];

    
    ri2 = r^2;
    sin2 = sin(theta)^2;
    cos2 = cos(theta)^2;
    sine = sin(theta);
    cosine = cos(theta);
    R_i=[ri2*sigma2_theta*sin2+sigma2_r*cos2   (sigma2_r-ri2*sigma2_theta)*sine*cosine; 
        (sigma2_r-ri2*sigma2_theta)*sine*cosine  ri2*sigma2_theta*cos2+sigma2_r*sin2];
    R_diag(2*i-1:2*i,2*i-1:2*i) = R_i;
end

for i=1:100
    %Getting bias from synchronous radar and gps measurements
    Z_diff = [Z_diff; [track(1:2,i) - gps(1:2,i)]];
end

plot(gps(1,:),gps(2,:),'b');
hold on;
plot(radar_biased(1,:),radar_biased(2,:),'g');
hold on;
plot(track(1,:),track(2,:),'r');
hold off
%Bias Estimation
beta_calc = inv((H_stack)'*inv(R_diag)*H_stack)*(H_stack)'*inv(R_diag)*Z_diff;
X1
